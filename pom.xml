<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<artifactId>pepperModules-GATEModules</artifactId>
	<name>${project.groupId}.${project.artifactId}</name>
	<packaging>bundle</packaging>
	<properties>
		<maven-bundle-plugin.version>2.3.7</maven-bundle-plugin.version>
		<maven-release-plugin.version>2.1</maven-release-plugin.version>
		<maven-site-plugin.version>3.1</maven-site-plugin.version>
		<maven-project-info-reports-plugin.version>2.4</maven-project-info-reports-plugin.version>
		<docbkx-maven-plugin.version>2.0.14</docbkx-maven-plugin.version>
		<docbkx-fop-support.version>2.0.14</docbkx-fop-support.version>
		<maven-resources-plugin.version>2.5</maven-resources-plugin.version>
	</properties>
	<distributionManagement>
		<repository>
			<id>korpling</id>
			<name>korpling maven repo</name>
			<url>file:///srv/www/maven2/</url>
			<!-- <url>scpexe://korpling.german.hu-berlin.de/srv/www/maven2/</url> -->
		</repository>
	</distributionManagement>
	<repositories>
		<repository>
			<id>korpling</id>
			<name>korpling maven repo</name>
			<url>http://korpling.german.hu-berlin.de/maven2</url>
		</repository>
	</repositories>
	<!-- Declares this project to be an extension of the project pepper-parentModule. 
		The parent project for instance contains all dependencies necessary for using 
		the SaltNPepper environment (all Pepper projects and all Salt projects). -->
	<parent>
		<groupId>de.hu_berlin.german.korpling.saltnpepper</groupId>
		<artifactId>pepper-parentModule</artifactId>
		<version>2.0.1-SNAPSHOT</version>
		<relativePath>../pepper-parentModule/pom.xml</relativePath>
	</parent>
	<description>This project provides three sample modules for Pepper. It provides an importer, an exporter and a manipulator. The project can be used as a container for creating new PepperModules. One just have to override the areas marked with TODO.</description>
	<issueManagement>
		<system>Github</system>
		<url>https://github.com/korpling/pepperModules-GATEModules/issues</url>
	</issueManagement>
	<ciManagement>
		<system>Jenkins</system>
		<url>https://korpling.german.hu-berlin.de/jenkins/</url>
	</ciManagement>
	<inceptionYear>2015</inceptionYear>
	<organization>
		<name>Humboldt-Universit√§t zu Berlin</name>
	</organization>

	<dependencies>
		<dependency>
			<groupId>uk.ac.gate</groupId>
			<artifactId>gate-core</artifactId>
			<version>8.0</version>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<!-- start: Plugin for automatic releasing -->
			<plugin>
				<artifactId>maven-release-plugin</artifactId>
				<version>${maven-release-plugin.version}</version>
				<configuration>
					<releaseProfiles>release</releaseProfiles>
					<goals>package assembly:single deploy</goals>
				</configuration>
			</plugin>
			<!-- start: creation of bundle jar This plugIn creates a META-INF folder 
				if not present and adds the entries into the MANIFEST.MF file required for 
				OSGi. It also creates an OSGI-INF folder necessary for using service-components 
				in OSGi. -->
			<plugin>
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
				<version>${maven-bundle-plugin.version}</version>
				<extensions>true</extensions>
				<executions>
					<execution>
						<phase>process-classes</phase>
						<goals>
							<goal>bundle</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<manifestLocation>${META-INF}</manifestLocation>
					<source>${java.version}</source>
					<target>${java.version}</target>
					<instructions>
						<Bundle-Name>${project.artifactId}</Bundle-Name>
						<Bundle-SymbolicName>${project.groupId}.${project.artifactId};singleton:=true</Bundle-SymbolicName>
						<Bundle-Version>${project.version}</Bundle-Version>
						<Bundle-RequiredExecutionEnvironment>JavaSE-${java.version}</Bundle-RequiredExecutionEnvironment>
						<Service-Component>${allServiceComponents}</Service-Component>
						<Bundle-ClassPath>.,{maven-dependencies}, lib/lib.jar</Bundle-ClassPath>
						<Include-Resource>{maven-resources}, LICENSE, NOTICE, lib=lib</Include-Resource>
					</instructions>
				</configuration>
			</plugin>
			<!-- end: creation of bundle jar -->
		</plugins>
	</build>
</project>